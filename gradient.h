enum gradient {
	KINDLMANN, INFERNO, BLACK_BODY, VIRIDIS, PLASMA,
	BuGn, BuPu, GnBu, OrRd, PuBu, PuBuGn, PuRd, RdPu, YlGn, YlGnBu, YlOrBr, YlOrRd,
	NUM_GRADIENTS,
};

#define GN 8

double gradients[NUM_GRADIENTS][GN][3] = {
	// https://www.kennethmoreland.com/color-advice/
	[VIRIDIS] = {{68, 1, 84}, {70, 50, 127}, {54, 92, 141}, {39, 127, 142}, {31, 161, 135}, {74, 194, 109}, {159, 218, 58}, {253, 231, 37}},
	[KINDLMANN] = {{0, 0, 0}, {36, 6, 117}, {7, 62, 150}, {5, 115, 97}, {8, 159, 21}, {112, 196, 9}, {250, 208, 146}, {255, 255, 255}},
	[INFERNO] = {{0, 0, 4}, {40, 11, 84}, {101, 21, 110}, {159, 42, 99}, {212, 72, 66}, {245, 125, 21}, {250, 193, 39}, {252, 255, 164}},
	[BLACK_BODY] = {{0, 0, 0}, {65, 23, 18}, {128, 31, 27}, {188, 51, 32}, {224, 101, 10}, {232, 161, 26}, {231, 218, 48}, {255, 255, 255}},
	[PLASMA] = {{13, 8, 135}, {84, 2, 163}, {139, 10, 165}, {185, 50, 137}, {219, 92, 104}, {244, 136, 73}, {254, 188, 43}, {240, 249, 33}},
	//  https://colorbrewer2.org/#type=sequential
	[BuGn] =   {{0, 88, 36},   {35, 139, 69},  {65, 174, 118},  {102, 194, 164}, {153, 216, 201}, {204, 236, 230}, {229, 245, 249}, {247, 252, 253}},
	[BuPu] =   {{110, 1, 107}, {136, 65, 157}, {140, 107, 177}, {140, 150, 198}, {158, 188, 218}, {191, 211, 230}, {224, 236, 244}, {247, 252, 253}},
	[GnBu] =   {{8, 88, 158},  {43, 140, 190}, {78, 179, 211},  {123, 204, 196}, {168, 221, 181}, {204, 235, 197}, {224, 243, 219}, {247, 252, 240}},
	[OrRd] =   {{153, 0, 0},   {215, 48, 31},  {239, 101, 72},  {252, 141, 89},  {253, 187, 132}, {253, 212, 158}, {254, 232, 200}, {255, 247, 236}},
	[PuBu] =   {{3, 78, 123},  {5, 112, 176},  {54, 144, 192},  {116, 169, 207}, {166, 189, 219}, {208, 209, 230}, {236, 231, 242}, {255, 247, 251}},
	[PuBuGn] = {{1, 100, 80},  {2, 129, 138},  {54, 144, 192},  {103, 169, 207}, {166, 189, 219}, {208, 209, 230}, {236, 226, 240}, {255, 247, 251}},
	[PuRd] =   {{145, 0, 63},  {206, 18, 86},  {231, 41, 138},  {223, 101, 176}, {201, 148, 199}, {212, 185, 218}, {231, 225, 239}, {247, 244, 249}},
	[RdPu] =   {{122, 1, 119}, {174, 1, 126},  {221, 52, 151},  {247, 104, 161}, {250, 159, 181}, {252, 197, 192}, {253, 224, 221}, {255, 247, 243}},
	[YlGn] =   {{0, 90, 50},   {35, 132, 67},  {65, 171, 93},   {120, 198, 121}, {173, 221, 142}, {217, 240, 163}, {247, 252, 185}, {255, 255, 229}},
	[YlGnBu] = {{12, 44, 132}, {34, 94, 168},  {29, 145, 192},  {65, 182, 196},  {127, 205, 187}, {199, 233, 180}, {237, 248, 177}, {255, 255, 217}},
	[YlOrBr] = {{140, 45, 4},  {204, 76, 2},   {236, 112, 20},  {254, 153, 41},  {254, 196, 79},  {254, 227, 145}, {255, 247, 188}, {255, 255, 229}},
	[YlOrRd] = {{177, 0, 38},  {227, 26, 28},  {252, 78, 42},   {253, 141, 60},  {254, 178, 76},  {254, 217, 118}, {255, 237, 160}, {255, 255, 204}},
};

#if 1
static inline void set_brightness(double desired, double rgb1[3], double r[3])
{
	memcpy(r, rgb1, sizeof(double) * 3);
	double dot = rgb1[0] * rgb1[0] + rgb1[1] * rgb1[1] + rgb1[2] * rgb1[2];
	double mag = sqrt(dot);
	for (int k = 0; k < 3; ++k) {
		r[k] = r[k] / mag * sqrt(pow(desired, 2) *3);
		if (r[k] > 1)
			r[k] = 1;
	}
}
#endif
